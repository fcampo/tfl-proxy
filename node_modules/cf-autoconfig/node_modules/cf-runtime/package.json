{
  "name": "cf-runtime",
  "version": "0.0.1",
  "author": {
    "name": "VMware",
    "email": "mariash@vmware.com"
  },
  "description": "Cloud Foundry API module",
  "keywords": [
    "cloud foundry",
    "cloudfoundry"
  ],
  "homepage": "http://cloudfoundry.com",
  "repository": {
    "type": "git",
    "url": "git://github.com/cloudfoundry/vcap-node/tree/master/cf-runtime"
  },
  "dependencies": {
    "mongodb": "0.9.x",
    "redis": "0.7.x",
    "mysql": "0.9.x",
    "amqp": "0.1.x",
    "pg": "0.6.x"
  },
  "main": "./lib",
  "engines": {
    "node": ">= 0.4.0"
  },
  "scripts": {
    "test": "node tests/run.js"
  },
  "readme": "# cf-runtime\n\ncf-runtime is a Node.js module that provides API to Cloud Foundry platform. It provides easy access to Cloud Foundry application properties and services.\n\n## Installation\n\n```bash\nnpm install cf-runtime\n```\n\nIf cloned from github install dependencies:\n\n```bash\nnpm install -d\n```\n\n### Tests\n\nRun basic tests:\n\n```bash\nnpm test\n```\n\nTo run integration tests copy services.conf.template to services.conf with specified services connection properties and run:\n\n```bash\nTESTS=integration npm test\n```\n\n## Usage\n\n```js\nvar cf = require('cf-runtime')\nvar app = cf.CloudApp\n\n// Check if application is running on Cloud Foundry\n\napp.runningInCloud\n\n// Get application properties\n\napp.host\napp.port\n\n// Get the list of application service names\n\napp.serviceNames\n\n// Obtain connection properties for single service of type Redis\n\napp.serviceProps.redis\n\n// Obtain connection properties for service named 'redis-service-name'\n\napp.serviceProps['redis-service-name']\n\n// Obtain the list of service names of specific type\n\napp.serviceNamesOfType.redis\n\n// Check if service of the given type is available\n\ncf.RedisClient !== undefined\n\n// Connect to a single service of type Redis\n\nvar redisClient = cf.RedisClient.create()\n\n// Connect to mysql service named 'redis-service-name'\n\nvar redisClient = cf.RedisClient.createFromSvc('redis-service-name')\n\n```\n\n### Service properties\n\n* name\n* label (service type)\n* version\n* host\n* port\n* username\n* password\n\n#### Additional properties\n\nRabbitmq:\n\n* url\n* vhost\n\nMongoDB:\n\n* db\n* url\n\nPostgresql, Mysql, Redis:\n\n* database\n\n### Service clients\n\nThis is the list of Node.js modules that are used to provide connection to Cloud Foundry services:\n\n#### AMQP client\n\nNode module: [amqp](https://github.com/postwait/node-amqp)\n\nFunctions:\n\n* cf.AMQPClient.create([implOptions]) - creates and returns an amqp client instance connected to a single rabbitmq service\n* cf.AMQPClient.createFromSvc(name, [implOptions]) - creates and returns an amqp client instance connected to a rabbitmq service with the specified name\n\nParameters:\n\nimplOptions - optional {object} non-connection related implementation options\n\nReturns: AMQP client instance\n\n#### Mongodb client\n\nNode module: [mongodb](https://github.com/christkv/node-mongodb-native)\n\nFunctions:\n\n* cf.MongoClient.create([options], callback) - creates a mongodb client instance connected to a single mongodb service and executes provided callback\n* cf.MongoClient.createFromSvc(name, [options], callback) - creates a mongodb client instance connected to a mongodb service with the specified name and executes provided callback\n\nParameters:\n\noptions - optional {object} non-connection related options\ncallback - {function} connection callback\n\nReturns: null\n\n#### Mysql client\n\nNode module: [mysql](https://github.com/felixge/node-mysql)\n\nFunctions:\n\n* cf.MysqlClient.create([options]) - creates and returns a mysql client instance connected to a single mysql service\n* cf.MysqlClient.createFromSvc(name, [options]) - creates and returns a mysql client instance connected to a mysql service with the specified name\n\nParameters:\n\noptions - optional {object} non-connection related options\n\nReturns: Mysql client instance\n\n#### Postgresql client\n\nNode module: [pg](https://github.com/brianc/node-postgres)\n\nFunctions:\n\n* cf.PGClient.create(callback) - creates a postgresql client instance connected to a single postgresql service and executes provided callback\n* cf.PGClient.createFromSvc(name, callback) - creates a postgresql client instance connected to a postgresql service with the specified name and executes provided callback\n\nParameters:\n\ncallback - {function} connection callback\n\nReturns: {boolean}\n\n#### Redis client\n\nNode module: [redis](https://github.com/mranney/node_redis)\n\nFunctions:\n\n* cf.RedisClient.create([options]) - creates and returns a redis client instance connected to a single redis service\n* cf.RedisClient.createFromSvc(name, [options]) - creates and returns a redis client instance connected to a redis service with the specified name\n\nParameters:\n\noptions - optional {object} non-connection related options\n\nReturns: Redis client instance\n",
  "readmeFilename": "Readme.md",
  "_id": "cf-runtime@0.0.1",
  "dist": {
    "shasum": "7a0b8e553891b1e5b10cefe332a90cbed9982cad"
  },
  "_from": "cf-runtime@0.0.x",
  "_resolved": "https://registry.npmjs.org/cf-runtime/-/cf-runtime-0.0.1.tgz"
}
